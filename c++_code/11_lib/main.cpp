#include "public.h" // 把public.h头文件包含进来

int main()
{
    func();
}
// 静态库在编译的时候，主程序文件与静态库一起编译，把主程序与主程序中用到的库函数一起整合进了目标文件。
// 这样做优点是在编译后的可执行程序可以独立运行，因为所使用的函数都已经被编译进去了。缺点是，如果所使用的静态库发生更新改变，我们的程序必须重新编译
// 静态库文件名的命名方式是“libxxx.a”,库名前加”lib”，后缀用”.a”，“xxx”为静态库名
// g++ -c -o libpublic.a public.cpp
//使用静态库的方法一，直接把调用者源代码和静态库文件名一起编译。
// g++ -o main main.cpp libpublic.a

// 动态库的命名方式与静态库类似，前缀相同，为“lib”，后缀变为“.so” “xxx”为动态库名。
//动态库在编译的时候只做语法检查，并没有被编译进目标代码，当程序执行到动态库中的函数时才调用该函数库里的代码。动态函数库并没有整合进程序，所以程序的运行环境必须提供动态库路径。
// 优点是，如果所使用的动态库发生更新改变，程序不需要重新编译，所以动态库升级比较方便
// g++ -fPIC -shared -o libpublic.so public.cpp
// 无需重新编译main.cpp，直接执行程序

// 如果在动态库文件和静态库文件同时存在，优先使用动态库编译。